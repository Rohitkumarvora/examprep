
import { GoogleGenAI, Type } from "@google/genai";
import { Quiz, Question } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const questionSchema = {
    type: Type.OBJECT,
    properties: {
        question: { type: Type.STRING, description: "The question text." },
        options: { 
            type: Type.ARRAY, 
            items: { type: Type.STRING },
            description: "An array of 4 possible answers."
        },
        answer: { 
            type: Type.STRING, 
            description: "The correct answer, which must be one of the strings from the options array."
        },
        explanation: { type: Type.STRING, description: "A brief explanation for why the answer is correct." },
    },
    required: ["question", "options", "answer", "explanation"]
};

export const generateQuiz = async (topic: string, numQuestions: number): Promise<Quiz> => {
    const prompt = `Generate a quiz with ${numQuestions} multiple-choice questions about the following topic: "${topic}".
    Each question should have exactly 4 options.
    For each question, provide the question text, the options array, the correct answer, and an explanation.
    Ensure the provided 'answer' is an exact match to one of the strings in the 'options' array.
    The questions should be challenging and relevant to the topic.
    Do not generate matching or multiple-answer questions.
    `;

    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        questions: {
                            type: Type.ARRAY,
                            items: questionSchema
                        }
                    },
                    required: ["questions"]
                }
            }
        });
        
        const jsonText = response.text.trim();
        const quizData = JSON.parse(jsonText) as { questions: Question[] };
        
        if (!quizData.questions || !Array.isArray(quizData.questions) || quizData.questions.length === 0) {
            throw new Error("AI returned invalid or empty quiz data.");
        }
        
        // Sanitize data to ensure consistency
        const sanitizedQuestions = quizData.questions.map(q => ({
            ...q,
            isMultipleChoice: false,
            isMatching: false,
        }));

        return {
            id: `ai-${topic.replace(/\s+/g, '-')}-${Date.now()}`,
            title: `AI-Generated Quiz: ${topic}`,
            description: `A ${numQuestions}-question quiz about ${topic} generated by AI.`,
            questions: sanitizedQuestions,
        };

    } catch (error) {
        console.error("Error generating quiz with Gemini:", error);
        throw new Error("Failed to generate quiz from AI service.");
    }
};
